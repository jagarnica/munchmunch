import React, { useState, useEffect, useReducer } from 'react';
import { App } from 'components/pages/app';
import { Amplify, Auth } from 'aws-amplify';
import { AppContext, AppContextInterface } from 'libs/contextLib';
import { ThemeProvider, Spinner, CSSReset, Box } from '@chakra-ui/core';
import { User, AWSCurrentUserInfo } from 'types/';
import { authReducer } from 'libs/reducers';
import { ApolloClient, from, HttpLink, InMemoryCache, split, ApolloProvider } from '@apollo/client';
import { createSubscriptionHandshakeLink } from 'aws-appsync-subscription-link';
import { createAuthLink } from 'aws-appsync-auth-link';
import awsConfig from '../aws-exports.js';
// Import the autogenerated config file
const InitialState: AppContextInterface = {
  user: undefined,
  isAuthenticated: false,
};

const httpLink = new HttpLink({
  uri: awsConfig.aws_appsync_graphqlEndpoint,
});

const client = new ApolloClient({
  cache: new InMemoryCache(),
  link: from([
    createAuthLink({
      url: awsConfig.aws_appsync_graphqlEndpoint,
      auth: {
        type: awsConfig.aws_appsync_authenticationType,

        jwtToken: async () => (await Auth.currentSession()).getIdToken().getJwtToken(),
      },
      region: awsConfig.aws_appsync_region,
    }),
    split(
      op => {
        const definition = op.query.definitions[0];
        const operation = definition.kind === 'OperationDefinition' && definition.operation === 'subscription';
        return operation;
      },
      httpLink,
      createSubscriptionHandshakeLink(
        {
          auth: {
            type: awsConfig.aws_appsync_authenticationType,

            jwtToken: async () => (await Auth.currentSession()).getIdToken().getJwtToken(),
          },
          region: awsConfig.aws_appsync_region,
          url: awsConfig.aws_appsync_graphqlEndpoint,
        },
        httpLink
      )
    ),
  ]),
});
/**
 * @name IndexPage
 * @description This is the entry point for users when they enter the site.
 */
const IndexPage = (): React.ReactNode => {
  const [state, dispatch] = useReducer(authReducer, InitialState);
  const [loadingUser, setLoadingUser] = useState(true);
  // Configure AWS authentification
  useEffect(() => {
    const authenticateSession = async () => {
      try {
        // Load the current user session
        await Auth.currentSession();
        const { attributes }: AWSCurrentUserInfo = await Auth.currentUserInfo();
        const loadedUser: User = {
          name: attributes.name,
          familyName: attributes.family_name,
          email: attributes.email,
        };
        dispatch({ type: 'LOGIN_SUCCESS', payload: { user: loadedUser } });
      } catch (e) {
        if (e !== 'No current user') {
          dispatch({ type: 'LOGOUT_SUCCESS' });
        }
      }
      setLoadingUser(false);
    };
    authenticateSession();
  }, []);
  Amplify.configure(awsConfig);

  // Show a spinner while we are checking if the user is authenticated
  if (loadingUser) {
    return <FullPageSpinner />;
  }
  // Show the app when done loading
  return (
    <ApolloProvider client={client}>
      <AppContext.Provider value={{ state, dispatch }}>
        <App />
      </AppContext.Provider>
    </ApolloProvider>
  );
};
export default IndexPage;

const FullPageSpinner = (): JSX.Element => (
  <ThemeProvider>
    <CSSReset></CSSReset>
    <Box height="3rem" width="3rem" position="fixed" top="50%" left="50%" marginLeft="-1.5rem" marginTop="-1.5rem">
      <Spinner thickness="4px" textAlign="center" size="xl" color="orange.500" />
    </Box>
  </ThemeProvider>
);
